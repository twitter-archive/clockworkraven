#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#


module TaskStatus
  INVALID = 1
  PENDING = 2
  COMPLETE = 3
  VALUE_MAP = {1 => "INVALID", 2 => "PENDING", 3 => "COMPLETE"}
  VALID_VALUES = Set.new([INVALID, PENDING, COMPLETE]).freeze
end

class HumanEvalException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.description = message
  end

  def message; description end

  DESCRIPTION = 1

  FIELDS = {
    DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class HumanEvalTask
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HUMANEVALTASKTYPE = 1
  FIELDVALUESMAP = 2

  FIELDS = {
    HUMANEVALTASKTYPE => {:type => ::Thrift::Types::STRING, :name => 'humanEvalTaskType'},
    FIELDVALUESMAP => {:type => ::Thrift::Types::MAP, :name => 'fieldValuesMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field humanEvalTaskType is unset!') unless @humanEvalTaskType
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field fieldValuesMap is unset!') unless @fieldValuesMap
  end

  ::Thrift::Struct.generate_accessors self
end

class HumanEvalTaskResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HUMANEVALTASKRESULTMAP = 1
  STATUS = 2

  FIELDS = {
    HUMANEVALTASKRESULTMAP => {:type => ::Thrift::Types::MAP, :name => 'humanEvalTaskResultMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}, :optional => true},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => TaskStatus}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field status is unset!') unless @status
    unless @status.nil? || TaskStatus::VALID_VALUES.include?(@status)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class HumanEvalSubmitTaskParams
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TASK = 1
  DOSUBMITTOPRODUCTION = 2

  FIELDS = {
    TASK => {:type => ::Thrift::Types::STRUCT, :name => 'task', :class => HumanEvalTask},
    DOSUBMITTOPRODUCTION => {:type => ::Thrift::Types::BOOL, :name => 'doSubmitToProduction'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field task is unset!') unless @task
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field doSubmitToProduction is unset!') if @doSubmitToProduction.nil?
  end

  ::Thrift::Struct.generate_accessors self
end

class HumanEvalSubmitTaskResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TASKID = 1

  FIELDS = {
    TASKID => {:type => ::Thrift::Types::I64, :name => 'taskId'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field taskId is unset!') unless @taskId
  end

  ::Thrift::Struct.generate_accessors self
end

class HumanEvalFetchAnnotationParams
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TASKIDLIST = 1

  FIELDS = {
    TASKIDLIST => {:type => ::Thrift::Types::LIST, :name => 'taskIdList', :element => {:type => ::Thrift::Types::I64}}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field taskIdList is unset!') unless @taskIdList
  end

  ::Thrift::Struct.generate_accessors self
end

class HumanEvalFetchAnnotationResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TASKIDRESULTSMAP = 1

  FIELDS = {
    TASKIDRESULTSMAP => {:type => ::Thrift::Types::MAP, :name => 'taskIdResultsMap', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => HumanEvalTaskResult}}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field taskIdResultsMap is unset!') unless @taskIdResultsMap
  end

  ::Thrift::Struct.generate_accessors self
end

